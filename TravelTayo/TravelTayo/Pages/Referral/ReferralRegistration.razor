@page "/referral/referralregistration"
@attribute [Authorize]

<div class="container my-5">
    <section class="py-5 bg-light text-center mb-4">
        <h1 class="fw-bold text-primary">Referral Registration</h1>
         <p class="text-center mb-5">Fill in your details to join the TravelTayo Referral Program.</p>
    </section>
   

    <EditForm Model="@registrationModel" OnValidSubmit="SubmitRegistration">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Full Name</label>
            <InputText class="form-control" @bind-Value="registrationModel.FullName" Disabled />
        </div>

        <div class="mb-3">
            <label class="form-label">Email Address</label>
            <InputText type="email" class="form-control" @bind-Value="registrationModel.EmailAddress" Disabled />
        </div>

        <div class="mb-3">
            <label class="form-label">Upload GCash QR Code</label>
            <InputFile OnChange="UploadQRCode" />
            <p>For ease of transaction pleae upload your Gcash QR code</p>
        </div>

        <button type="submit" class="btn btn-primary w-100">Submit Registration</button>
    </EditForm>
</div>

@code {
    private RegistrationModel registrationModel = new();
    private string? UploadedQRPath;
    private string? ReferralLink;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!(user.Identity?.IsAuthenticated ?? false))
        {
            Navigation.NavigateTo("/authentication/login");
            return;
        }
        var b2cUserId = user.Claims.FirstOrDefault(c => c.Type == "http://schemas.microsoft.com/identity/claims/objectidentifier" ||
         c.Type == "b2cUserID")?.Value;
        var existingAccount = await AccountService.GetByB2CUserIdAsync(b2cUserId);

        if (existingAccount != null)
        {
            ReferralLink = existingAccount.ReferralCode;

        }

        // Pre-fill FullName and EmailAddress from B2C claims
        registrationModel.FullName = user.Claims.FirstOrDefault(c => c.Type == "name" || c.Type == ClaimTypes.Name)?.Value ?? string.Empty;
        registrationModel.EmailAddress = user.Claims.FirstOrDefault(c =>
            c.Type == ClaimTypes.Email)?.Value ?? string.Empty;

        // Optionally: check if already registered and redirect to dashboard
        // var response = await ReferralService.CheckUserAsync(user);
        // if (response.Exists)
        // {
        //     Navigation.NavigateTo("/referral/referraldashboard");
        //     return;
        // }
    }

    private async Task SubmitRegistration()
    {
        if (string.IsNullOrEmpty(UploadedQRPath))
        {
            Console.WriteLine("QR Code is required before submitting.");
            return;
        }

        var registrationId = Guid.NewGuid();
        var referralLink = $"{Navigation.BaseUri.TrimEnd('/')}/referral/{registrationId}";

        var entity = new TravelTayo.Models.ReferralRegistration
        {
            ReferralRegistrationId = registrationId,
            FullName = registrationModel.FullName,
            EmailAddress = registrationModel.EmailAddress,
            GCashQRCode = UploadedQRPath!,
            Status = "Active",
            RegistrationDate = DateTime.UtcNow,
            ReferralLink = ReferralLink
        };

        // Save to database
        await ReferralService.AddReferralAsync(entity);

        Navigation.NavigateTo($"/referral/referraldashboard");
    }

    private async Task UploadQRCode(InputFileChangeEventArgs e)
    {
        var file = e.File;

        // Example: Upload to Azure Blob Storage
        var sanitizedEmail = registrationModel.EmailAddress.Replace("@", "_").Replace(".", "_");
        var fileName = $"{sanitizedEmail}_gcashqr{Path.GetExtension(file.Name)}";

        var connectionString = BlobConfig.ConnectionString;
        var containerName = BlobConfig.ContainerName;

        var blobServiceClient = new BlobServiceClient(connectionString);
        var containerClient = blobServiceClient.GetBlobContainerClient(containerName);

        await containerClient.CreateIfNotExistsAsync();
        var blobClient = containerClient.GetBlobClient(fileName);

        using var stream = file.OpenReadStream();
        await blobClient.UploadAsync(stream, overwrite: true);

        UploadedQRPath = blobClient.Uri.ToString();
        Console.WriteLine($"Uploaded QR Code: {UploadedQRPath}");
    }

    public class RegistrationModel
    {
        [MaxLength(200)]
        public string FullName { get; set; } = string.Empty;

        [EmailAddress]
        public string EmailAddress { get; set; } = string.Empty;
    }
}
